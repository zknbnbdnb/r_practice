print(gapminder)
# Country and continent are factors
# You can get a vector of the factor's levels with:
levels(gapminder$continent)
# Produce a plot for a year of data
# produceGapminderPlot expects a single year of data
# Using pipes to do this:
gapminder %>%
filter(year == 2000) %>%
produceGapminderPlot()
# We can add further filters to the pipe, e.g.
# to only show certain continents:
gapminder %>%
filter(year == 2000) %>%
filter(continent %in% c("Europe", "Africa")) %>%
produceGapminderPlot()
#########################################################################
# The material below is for the "going further" section of the workshop #
#########################################################################
# We can return a tibble showing the richest country and its GDP per capita
# using the getRichestCountry() function:
gapminder %>%
filter(year == 1800) %>%
getRichestCountry()
# When we are producing a plot with a historic trace for a country, we
# need to create a data set with that country's historic data:
historicdata <- gapminder %>%
filter(year <= 2000) %>%
filter(country == "United Kingdom")
# addHistoricPlot() will add a trace showing the trajectory of a country
# to an exising plot:
gapminder %>%
filter(year == 2000) %>%
produceGapminderPlot() %>%
addHistoricPlot(historicdata)
# You probably want to set the makeSemiTransparent option
# on produceGapminderPlot() to focus attention on the selected country
gapminder %>%
filter(year == 2000) %>% # Only show the trace up to the year we're plotting
produceGapminderPlot(makeSemiTransparent = TRUE) %>%
addHistoricPlot(historicdata)
# Load the gapminder data
# (this contains more data than that included in the gapminder R package)
# Note that when we run a shiny app, the working directory is the app.R's location
gapminder <- readRDS("gapminder.rds")
runApp('Documents/写的材料/汕头大学-教学/双语课程-大数据可视化/2020PPT与教案/教师参考资料/Shiny/runningExample/01_defaultapp/worked_example')
runApp('Documents/workspace/projects/circRNA_review/scripts/circRNAToolsAtlas')
runApp('Documents/workspace/projects/circRNA_review/scripts/circRNAToolsAtlas')
runApp('Documents/workspace/projects/circRNA_review/scripts/circRNAToolsAtlas')
install.packages("shinydashboard")
runApp('Documents/workspace/projects/circRNA_review/scripts/circRNAToolsAtlas')
install.packages("echarts4r")
install.packages("echarts4r")
runApp('Documents/workspace/projects/circRNA_review/scripts/circRNAToolsAtlas')
runApp('Documents/写的材料/汕头大学-教学/双语课程-大数据可视化/2020PPT与教案/教师参考资料/Shiny/runningExample/10_clickdata/worked_example')
runApp('Documents/写的材料/汕头大学-教学/双语课程-大数据可视化/2020PPT与教案/教师参考资料/Shiny/runningExample/11_nearpoints/worked_example')
runApp('Documents/写的材料/汕头大学-教学/双语课程-大数据可视化/2020PPT与教案/教师参考资料/Shiny/runningExample/12_observeevent/worked_example')
runApp('Documents/写的材料/汕头大学-教学/双语课程-大数据可视化/2020PPT与教案/教师参考资料/Shiny/runningExample/13_historic/worked_example')
runApp('Documents/写的材料/汕头大学-教学/双语课程-大数据可视化/2020PPT与教案/教师参考资料/Shiny/runningExample/15_layout/worked_example')
runApp('Documents/写的材料/汕头大学-教学/双语课程-大数据可视化/2020PPT与教案/教师参考资料/Shiny/runningExample/02_loaddata/worked_example')
runApp('Documents/写的材料/汕头大学-教学/双语课程-大数据可视化/2020PPT与教案/教师参考资料/Shiny/runningExample/03_continentwidget/worked_example')
runExample("01_hello")
library(shiny)
runExample("01_hello")
runExample("02_text")
runApp('Documents/写的材料/汕头大学-教学/双语课程-大数据可视化/2020PPT与教案/第12周-第23-24节课/scripts/shinyWebsite')
shiny::runApp()
runApp()
runExample("01_hello")
shiny::runApp()
runExample("01_hello")
faithful
runExample("01_hello")
runExample("02_text")
runExample("03_reactivity")
runExample("02_text")
runExample("03_reactivity")
runExample("03_reactivity")
runExample("02_text")
runExample("03_reactivity")
runExample("01_hello")
runExample("03_reactivity")
runExample("04_mpg")
runExample("05_sliders")
runExample("06_tabsets")
runExample("07_widgets")
runApp()
runApp()
runExample("01_hello")
runExample("02_text")
runExample("03_reactivity")
runExample("04_mpg")
nExample("05_sliders")
runExample("05_sliders")
runExample("06_tabsets")
runExample("07_widgets")
runExample("08_html")
runApp()
runApp()
shiny::runApp('~/Documents/写的材料/汕头大学-教学/双语课程-大数据可视化/2020PPT与教案/3-作业代码/学生提的问题/shiny-颜卓然/scripts/shinyWebsite')
runApp('~/Documents/写的材料/汕头大学-教学/双语课程-大数据可视化/2020PPT与教案/3-作业代码/学生提的问题/shiny-颜卓然/scripts/shinyWebsite')
runApp('~/Documents/写的材料/汕头大学-教学/双语课程-大数据可视化/2020PPT与教案/3-作业代码/学生提的问题/shiny-颜卓然/scripts/shinyWebsite')
View(get.statistic.data4echart4r)
runApp('~/Documents/写的材料/汕头大学-教学/双语课程-大数据可视化/2020PPT与教案/3-作业代码/学生提的问题/shiny-颜卓然/scripts/shinyWebsite')
sum(1,2)
sum
(1,2)
sum (1,2)
sum   (1,2)
shiny::runApp()
date0 = seq.Date(from=as.Date('2021-01-01'),
to=as.Date('2021-12-31'), by='1 day')#选择2021年日历，划分一天
date = as.POSIXlt(date0)#数据类型转化
month = date$mon +1
weekdays = date$wday
mday = date$mday
datx = data.table(date0,month,weekdays,mday)
datx[, week:= as.numeric(format(date,"%W"))]
datx[,`:=`(val = runif(365),
weekdays = ifelse(weekdays==0, 7, weekdays))]
datx[,monthweek:= week - min(week) + 1,by=.(month)]
datx[,`:=`(
weekdays = factor(weekdays,levels=rev(1:7),
labels=c("Sun","Sat","Fri","Thu","Wed","Tue","Mon"),ordered=T),
month = factor(month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul",
"Aug","Sep","Oct","Nov","Dec"),ordered=T)
)]
datx = datx[,.(weekdays,monthweek,mday,month,val)]
ggplot(datx, aes(weekdays,monthweek,fill = val)) +
geom_tile(col ='white') +#填充
geom_text(label = mday,size=2)+#内部填充
facet_wrap(~month ,nrow=3) +#切成三行
scale_fill_viridis_c(guide = "colourbar", aesthetics = "fill") +
labs(title = 'Record',x='week of month',y=' ',fill = 'Times')+#标题
scale_y_continuous(minor_breaks = 1:6)#行标
install.packages(data.table)
install.packages("data.table")
library(data.table)
library(ggplot2)
date0 = seq.Date(from=as.Date('2021-01-01'),
to=as.Date('2021-12-31'), by='1 day')#选择2021年日历，划分一天
library(data.table)
library(ggplot2)
date0 = seq.Date(from=as.Date('2021-01-01'),
to=as.Date('2021-12-31'), by='1 day')#选择2021年日历，划分一天
date = as.POSIXlt(date0)#数据类型转化
month = date$mon +1
weekdays = date$wday
mday = date$mday
datx = data.table(date0,month,weekdays,mday)
datx[, week:= as.numeric(format(date,"%W"))]
datx[,`:=`(val = runif(365),
weekdays = ifelse(weekdays==0, 7, weekdays))]
datx[,monthweek:= week - min(week) + 1,by=.(month)]
datx[,`:=`(
weekdays = factor(weekdays,levels=rev(1:7),
labels=c("Sun","Sat","Fri","Thu","Wed","Tue","Mon"),ordered=T),
month = factor(month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul",
"Aug","Sep","Oct","Nov","Dec"),ordered=T)
)]
datx = datx[,.(weekdays,monthweek,mday,month,val)]
ggplot(datx, aes(weekdays,monthweek,fill = val)) +
geom_tile(col ='white') +#填充
geom_text(label = mday,size=2)+#内部填充
facet_wrap(~month ,nrow=3) +#切成三行
scale_fill_viridis_c(guide = "colourbar", aesthetics = "fill") +
labs(title = 'Record',x='week of month',y=' ',fill = 'Times')+#标题
scale_y_continuous(minor_breaks = 1:6)#行标
View(date)
date0
View(datx)
class(datx$mday)
datx$weekdays
View(date)
as.numeric(format(date,"%W"))
View(datx)
rev(1:7)
date0 = seq.Date(from=as.Date('2021-01-01'),
to=as.Date('2021-12-31'), by='1 day')#选择2021年日历，划分一天
date = as.POSIXlt(date0)#数据类型转化
month = date$mon +1
weekdays = date$wday
mday = date$mday
datx = data.table(date0,month,weekdays,mday)
datx[, week:= as.numeric(format(date,"%W"))]
datx[,`:=`(val = runif(365),
weekdays = ifelse(weekdays==0, 7, weekdays))]
datx[,monthweek:= week - min(week) + 1,by=.(month)]
# datx[,`:=`(
#            weekdays = factor(weekdays,levels=rev(1:7),
#                              labels=c("Sun","Sat","Fri","Thu","Wed","Tue","Mon"),ordered=T),
#            month = factor(month,levels=as.character(1:12),
#                           labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul",
#                                    "Aug","Sep","Oct","Nov","Dec"),ordered=T)
#            )]
datx[,`:=`(
weekdays = factor(weekdays,levels=c(1:7),
labels=c("Sun","Sat","Fri","Thu","Wed","Tue","Mon"),ordered=T),
month = factor(month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul",
"Aug","Sep","Oct","Nov","Dec"),ordered=T)
)]
datx = datx[,.(weekdays,monthweek,mday,month,val)]
ggplot(datx, aes(weekdays,monthweek,fill = val)) +
geom_tile(col ='white') +#填充
geom_text(label = mday,size=2)+#内部填充
facet_wrap(~month ,nrow=3) +#切成三行
scale_fill_viridis_c(guide = "colourbar", aesthetics = "fill") +
labs(title = 'Record',x='week of month',y=' ',fill = 'Times')+#标题
scale_y_continuous(minor_breaks = 1:6)#行标
datx$monthweek
datx$weekdays
weekdays = factor(weekdays,levels=c(1:7),
labels=c("Sun","Sat","Fri","Thu","Wed","Tue","Mon"),ordered=T)
weekdays
datx[,`:=`(
weekdays = factor(weekdays,levels=rev(1:7),
labels=c("Sun","Sat","Fri","Thu","Wed","Tue","Mon"),ordered=T),
month = factor(month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul",
"Aug","Sep","Oct","Nov","Dec"),ordered=T)
)]
datx$weekdays
View(datx)
date0 = seq.Date(from=as.Date('2021-01-01'),
to=as.Date('2021-12-31'), by='1 day')#选择2021年日历，划分一天
date = as.POSIXlt(date0)#数据类型转化
month = date$mon +1
weekdays = date$wday
mday = date$mday
datx = data.table(date0,month,weekdays,mday)
datx[, week:= as.numeric(format(date,"%W"))]
datx[,`:=`(val = runif(365),
weekdays = ifelse(weekdays==0, 7, weekdays))]
datx[,monthweek:= week - min(week) + 1,by=.(month)]
datx[,`:=`(
weekdays = factor(weekdays,levels=rev(1:7),
labels=c("Sun","Sat","Fri","Thu","Wed","Tue","Mon"),ordered=T),
month = factor(month,levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul",
"Aug","Sep","Oct","Nov","Dec"),ordered=T)
)]
View(datx)
temp <- unqiue(datx$weekdays)
temp <- factor(temp,levels=rev(1:7),
labels=c("Sun","Sat","Fri","Thu","Wed","Tue","Mon"),ordered=T)
temp <- unique(datx$weekdays)
temp
temp <- factor(temp,levels=rev(1:7),
labels=c("Sun","Sat","Fri","Thu","Wed","Tue","Mon"),ordered=T)
temp
temp <- unique(datx$weekdays)
temp <- factor(temp,levels=rev(1:7),ordered=T)
temp
temp <- unique(datx$weekdays)
temp <- unique(datx$weekdays)
levels(temp) <- rev(1:7
)
temp
temp <- unique(datx$weekdays)
levels(temp) <- rev(1:7)
temp
temp <- unique(datx$weekdays)
a <- factor(temp,levels=rev(1:7),
labels=c("Sun","Sat","Fri","Thu","Wed","Tue","Mon"),ordered=T)
a
temp <- unique(datx$weekdays)
a <- factor(temp,levels=c(1:7),
labels=c("Sun","Sat","Fri","Thu","Wed","Tue","Mon"),ordered=T)
a
a <- factor(c("Sun","Sat","Fri","Thu","Wed","Tue","Mon"),levels=c(1:7),
labels=c("Sun","Sat","Fri","Thu","Wed","Tue","Mon"),ordered=T)
a
View(datx)
？factor
?factor
clear
clear()
cls
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
runApp('~/Documents/写的材料/汕头大学-教学/0-数据可视化/2021PPT与教案/4-PPT/第13周-第23-24节课/scripts/shinyAppExample/01_defaultapp/worked_example')
shiny::runApp()
runApp()
runApp('~/Documents/写的材料/汕头大学-教学/0-数据可视化/2021PPT与教案/4-PPT/第13周-第23-24节课/scripts/shinyAppExample/01_defaultapp/worked_example')
runExample("01_hello")
library(dplyr)
library(readr)
library(pheatmap)
library(viridis)
library(gplots)
#mitophagy
Data <- read.csv('fpkm_genename.csv',header=T,sep=",")
#mitophagy
path <- getwd()
#mitophagy
path <- getwd()
file <- paste(path,"/fpkm_genename.csv",sep="")
Data <- read.csv(file,header=T,sep=",")
shiny::runApp()
install.packages("shinydashboard")
install.packages("echarts4r")
install.packages("DT")
runApp()
runApp('~/Documents/写的材料/汕头大学-教学/0-数据可视化/2022PPT与教案/1-作业/第7次作业/shinyWebsite')
shiny::runApp()
library("ggplot2")
library("dplyr")
library("lubridate")
library("tidyr")
ec2 <- ggplot2::economics %>%
tbl_df() %>%
transmute( Year = year(date),
Month = month(date),
Rate = uempmed) %>%
filter(Year > 2005) %>%
spread(Year, Rate)
install.packages("lubridate")
# 载入ggplot2
library("ggplot2")
library("dplyr")
library("lubridate")
library("tidyr")
ec2 <- ggplot2::economics %>%
tbl_df() %>%
transmute( Year = year(date),
Month = month(date),
Rate = uempmed) %>%
filter(Year > 2005) %>%
spread(Year, Rate)
View(ec2)
data4plot <- gather(ec2,-Month, key="Year", value="UempmedRate")
View(data4plot)
# 请对比na.rm 设置为T后的效果
data4plot <- gather(ec2,-Month, key="Year", value="UempmedRate", na.rm =T)
View(data4plot)
shiny::runApp()
runApp()
load("D:/R_code/shinyWebsite/data/statistics/publications.statistics.RData")
View(get.statistic.data4echart4r)
View(get.statistic.data4echart4r)
View(get.statistic.data4echart4r)
View(publications.statistics.data)
runApp()
library("ggplot2")
library("dplyr")
library("data.table")
getwd()
data = data.frame(read.csv("owid-covid-data.csv"))
getwd()
library("ggplot2")
library("dplyr")
library("data.table")
getwd()
data = data.frame(read.csv("D:/R_code/owid-covid-data.csv"))
View(data)
runApp()
runApp()
runApp()
View(publications.statistics.data)
ggplot(america_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, ya, label = labsa, group = NULL), data = labelDatea)
ggplot(china_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, yc, label = labsc, group = NULL), data = labelDatec)
ggplot(japan_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, yj, label = labsj, group = NULL), data = labelDatej)
ggplot(uk_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, yu, label = labsu, group = NULL), data = labelDateu)
ggplot(india_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, yi, label = labsi, group = NULL), data = labelDatei)
ggplot(process_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases,
color = location, size = total_cases)) + geom_line()
ggplot(process_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases,
color = location, size = total_cases)) + geom_line() +
facet_wrap(~location)
library("ggplot2")
library("dplyr")
library("data.table")
getwd()
data = data.frame(read.csv("D:/R_code/owid-covid-data.csv"))
need_data = select(data,
location,                 # 地区
date,                     # 日期
total_cases,              # 总病例
new_cases,                # 新增病例
total_cases_per_million,  # 每一百万人的总病例
new_cases_per_million,    # 每一百万人的新增病例
total_deaths,             # 总死亡病例
new_deaths,               # 新增死亡病例
total_deaths_per_million, # 每一百万人的总死亡病例
new_deaths_per_million,   # 每一百万人的新增死亡病例
total_vaccinations,       # 总疫苗接种数量
people_vaccinated,        # 总人类疫苗接种数量
)
america_data = filter(need_data, location == "North America")
china_data = filter(need_data, location == "China")
japan_data = filter(need_data, location == "Japan")
uk_data = filter(need_data, location == "United Kingdom")
india_data = filter(need_data, location == "India")
process_data = rbind(america_data, china_data, japan_data, uk_data, india_data)``
x = as.Date(c('2020-07-22'))
ya = c(range(america_data$total_cases)[-1])
yc = c(range(china_data$total_cases)[-1])
yj = c(range(japan_data$total_cases)[-1])
yu = c(range(uk_data$total_cases)[-1])
yi = c(range(india_data$total_cases)[-1])
labsa = paste(strwrap("Line graph of change in total cases
in the USA over time", 40), collapse = "\n")
labsc = paste(strwrap("Line graph of change in total cases
in the China over time", 40), collapse = "\n")
labsj = paste(strwrap("Line graph of change in total cases
in the Japan over time", 40), collapse = "\n")
labsu = paste(strwrap("Line graph of change in total cases
in the UK over time", 40), collapse = "\n")
labsi = paste(strwrap("Line graph of change in total cases
in the India over time", 40), collapse = "\n")
labelDatea = data.table(x = x, y = ya, labs = labs)
labelDatec = data.table(x = x, y = yc, labs = labs)
labelDatej = data.table(x = x, y = yj, labs = labs)
labelDateu = data.table(x = x, y = yu, labs = labs)
labelDatei = data.table(x = x, y = yi, labs = labs)
ggplot(america_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, ya, label = labsa, group = NULL), data = labelDatea)
ggplot(china_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, yc, label = labsc, group = NULL), data = labelDatec)
ggplot(japan_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, yj, label = labsj, group = NULL), data = labelDatej)
ggplot(uk_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, yu, label = labsu, group = NULL), data = labelDateu)
ggplot(india_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, yi, label = labsi, group = NULL), data = labelDatei)
ggplot(process_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases,
color = location, size = total_cases)) + geom_line()
ggplot(process_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases,
color = location, size = total_cases)) + geom_line() +
facet_wrap(~location)
need_data = select(data,
location,                 # 地区
date,                     # 日期
total_cases,              # 总病例
new_cases,                # 新增病例
total_cases_per_million,  # 每一百万人的总病例
new_cases_per_million,    # 每一百万人的新增病例
total_deaths,             # 总死亡病例
new_deaths,               # 新增死亡病例
total_deaths_per_million, # 每一百万人的总死亡病例
new_deaths_per_million,   # 每一百万人的新增死亡病例
total_vaccinations,       # 总疫苗接种数量
people_vaccinated,        # 总人类疫苗接种数量
)
america_data = filter(need_data, location == "North America")
china_data = filter(need_data, location == "China")
japan_data = filter(need_data, location == "Japan")
uk_data = filter(need_data, location == "United Kingdom")
india_data = filter(need_data, location == "India")
process_data = rbind(america_data, china_data, japan_data, uk_data, india_data)
x = as.Date(c('2020-07-22'))
ya = c(range(america_data$total_cases)[-1])
yc = c(range(china_data$total_cases)[-1])
yj = c(range(japan_data$total_cases)[-1])
yu = c(range(uk_data$total_cases)[-1])
yi = c(range(india_data$total_cases)[-1])
labsa = paste(strwrap("Line graph of change in total cases
in the USA over time", 40), collapse = "\n")
labsc = paste(strwrap("Line graph of change in total cases
in the China over time", 40), collapse = "\n")
labsj = paste(strwrap("Line graph of change in total cases
in the Japan over time", 40), collapse = "\n")
labsu = paste(strwrap("Line graph of change in total cases
in the UK over time", 40), collapse = "\n")
labsi = paste(strwrap("Line graph of change in total cases
in the India over time", 40), collapse = "\n")
labelDatea = data.table(x = x, y = ya, labs = labs)
labelDatec = data.table(x = x, y = yc, labs = labs)
labelDatej = data.table(x = x, y = yj, labs = labs)
labelDateu = data.table(x = x, y = yu, labs = labs)
labelDatei = data.table(x = x, y = yi, labs = labs)
ggplot(america_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, ya, label = labsa, group = NULL), data = labelDatea)
ggplot(china_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, yc, label = labsc, group = NULL), data = labelDatec)
ggplot(japan_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, yj, label = labsj, group = NULL), data = labelDatej)
ggplot(uk_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, yu, label = labsu, group = NULL), data = labelDateu)
ggplot(india_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases)) +
geom_line() + geom_text(aes(x, yi, label = labsi, group = NULL), data = labelDatei)
ggplot(process_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases,
color = location, size = total_cases)) + geom_line()
ggplot(process_data, aes(as.Date(date, format = "%Y-%m-%d"), total_cases,
color = location, size = total_cases)) + geom_line() +
facet_wrap(~location)
labelDatea = data.table(x = x, y = ya, labs = labs)
labelDatec = data.table(x = x, y = yc, labs = labs)
labelDatej = data.table(x = x, y = yj, labs = labs)
labelDateu = data.table(x = x, y = yu, labs = labs)
labelDatei = data.table(x = x, y = yi, labs = labs)
library("ggplot2")
library("dplyr")
library("data.table")
install.packages(unbalanced)
install.packages('unbalanced')
runApp()
runApp()
runApp()
runApp()
